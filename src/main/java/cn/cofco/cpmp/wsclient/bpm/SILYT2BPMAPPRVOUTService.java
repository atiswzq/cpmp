package cn.cofco.cpmp.wsclient.bpm;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.1.11
 * 2017-10-01T15:49:37.355+08:00
 * Generated source version: 3.1.11
 * 
 */
@WebServiceClient(name = "SI_LYT2BPM_APPRV_OUTService", 
                  wsdlLocation = "classpath:wsdl/bpm.wsdl",
                  targetNamespace = "http://cofco.com/lyt/bpm") 
public class SILYT2BPMAPPRVOUTService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://cofco.com/lyt/bpm", "SI_LYT2BPM_APPRV_OUTService");
    public final static QName HTTPSPort = new QName("http://cofco.com/lyt/bpm", "HTTPS_Port");
    public final static QName HTTPPort = new QName("http://cofco.com/lyt/bpm", "HTTP_Port");
    static {
        URL url = null;
        try {
            url = new URL("classpath:wsdl/bpm.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SILYT2BPMAPPRVOUTService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "classpath:wsdl/bpm.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public SILYT2BPMAPPRVOUTService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SILYT2BPMAPPRVOUTService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SILYT2BPMAPPRVOUTService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public SILYT2BPMAPPRVOUTService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public SILYT2BPMAPPRVOUTService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public SILYT2BPMAPPRVOUTService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns SILYT2BPMAPPRVOUT
     */
    @WebEndpoint(name = "HTTPS_Port")
    public SILYT2BPMAPPRVOUT getHTTPSPort() {
        return super.getPort(HTTPSPort, SILYT2BPMAPPRVOUT.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SILYT2BPMAPPRVOUT
     */
    @WebEndpoint(name = "HTTPS_Port")
    public SILYT2BPMAPPRVOUT getHTTPSPort(WebServiceFeature... features) {
        return super.getPort(HTTPSPort, SILYT2BPMAPPRVOUT.class, features);
    }


    /**
     *
     * @return
     *     returns SILYT2BPMAPPRVOUT
     */
    @WebEndpoint(name = "HTTP_Port")
    public SILYT2BPMAPPRVOUT getHTTPPort() {
        return super.getPort(HTTPPort, SILYT2BPMAPPRVOUT.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SILYT2BPMAPPRVOUT
     */
    @WebEndpoint(name = "HTTP_Port")
    public SILYT2BPMAPPRVOUT getHTTPPort(WebServiceFeature... features) {
        return super.getPort(HTTPPort, SILYT2BPMAPPRVOUT.class, features);
    }

}
