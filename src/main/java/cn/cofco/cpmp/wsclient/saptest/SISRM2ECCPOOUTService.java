package cn.cofco.cpmp.wsclient.saptest;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import java.net.MalformedURLException;
import java.net.URL;

/**
 * This class was generated by Apache CXF 3.1.11
 * 2017-06-12T22:37:37.161+08:00
 * Generated source version: 3.1.11
 * 
 */
@WebServiceClient(name = "SI_SRM2ECC_PO_OUTService", 
                  wsdlLocation = "classpath:wsdl/saptest.wsdl",
                  targetNamespace = "jt:bpm:demo") 
public class SISRM2ECCPOOUTService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("jt:bpm:demo", "SI_SRM2ECC_PO_OUTService");
    public final static QName HTTPSPort = new QName("jt:bpm:demo", "HTTPS_Port");
    public final static QName HTTPPort = new QName("jt:bpm:demo", "HTTP_Port");
    static {
        String path = "classpath:wsdl/saptest.wsdl";
        URL url = null;
        try {
            url = new URL(path);
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(SISRM2ECCPOOUTService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", path);
        }
        WSDL_LOCATION = url;
    }

    public SISRM2ECCPOOUTService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public SISRM2ECCPOOUTService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public SISRM2ECCPOOUTService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public SISRM2ECCPOOUTService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public SISRM2ECCPOOUTService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public SISRM2ECCPOOUTService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }    




    /**
     *
     * @return
     *     returns SISRM2ECCPOOUT
     */
    @WebEndpoint(name = "HTTPS_Port")
    public SISRM2ECCPOOUT getHTTPSPort() {
        return super.getPort(HTTPSPort, SISRM2ECCPOOUT.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SISRM2ECCPOOUT
     */
    @WebEndpoint(name = "HTTPS_Port")
    public SISRM2ECCPOOUT getHTTPSPort(WebServiceFeature... features) {
        return super.getPort(HTTPSPort, SISRM2ECCPOOUT.class, features);
    }


    /**
     *
     * @return
     *     returns SISRM2ECCPOOUT
     */
    @WebEndpoint(name = "HTTP_Port")
    public SISRM2ECCPOOUT getHTTPPort() {
        return super.getPort(HTTPPort, SISRM2ECCPOOUT.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns SISRM2ECCPOOUT
     */
    @WebEndpoint(name = "HTTP_Port")
    public SISRM2ECCPOOUT getHTTPPort(WebServiceFeature... features) {
        return super.getPort(HTTPPort, SISRM2ECCPOOUT.class, features);
    }

//    public static void main(String[] args) {
//        SISRM2ECCPOOUTService service = new SISRM2ECCPOOUTService();
//        SISRM2ECCPOOUT sisrm2ECCPOOUT = service.getHTTPPort();
//
//        BindingProvider bp = (BindingProvider) sisrm2ECCPOOUT;
//        bp.getRequestContext().put(BindingProvider.USERNAME_PROPERTY,"appuser5");
//        bp.getRequestContext().put(BindingProvider.PASSWORD_PROPERTY, "a123456");
//
//        ObjectFactory objectFactory = new ObjectFactory();
//        DTSRM2ECCPOREQ dtsrm2ECCPOREQ = objectFactory.createDTSRM2ECCPOREQ();
//
//        dtsrm2ECCPOREQ.setBUKRS("BUKRS1");
//        dtsrm2ECCPOREQ.setEBELN("EBELN1");
//
//        DTSRM2ECCPORESP dtsrm2ECCPORESP = sisrm2ECCPOOUT.siSRM2ECCPOOUT(dtsrm2ECCPOREQ);
////            System.out.println(dtsrm2ECCPORESP.toString());
//
//        OutputDto outputDto = OutputDtoUtil.setOutputDto(Constants.SUC_TRUE, RtnEnum.SUC_OPR, dtsrm2ECCPORESP);
//        System.out.println(outputDto.toJson());
//    }
}
